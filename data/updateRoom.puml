@startuml updateRoom

hide footbox
mainframe <b>sd</b> Update Room For Manager Account

actor User
participant "Browser" as Browser
participant ":ManagerRoleFilter" as ManagerRoleFilter
participant ":Helper" as Helper
participant ":UpdateRoomController" as UpdateRoomController
participant ":GetParam" as GetParam
participant ":RoomDAO" as RoomDAO
participant ":BookingInfoDAO" as BookingInfoDAO
participant "Database" as DB


User ->> Browser: Click on update room Link
activate Browser
Browser ->> ManagerRoleFilter: GET /UpdateRoomController
activate ManagerRoleFilter
ManagerRoleFilter ->> ManagerRoleFilter: Context.lookup(String name): Object
ManagerRoleFilter ->> Helper: protectedRouter(HttpServletRequest request, HttpServletResponse response, int minRole, int maxRole, String page): boolean
activate Helper
Helper ->> Helper: isLogin(HttpServletRequest request): boolean
Helper ->> Helper: correctRole(HttpServletRequest request, int minRole, int maxRole): boolean
alt return false 
    Helper -->> ManagerRoleFilter: forward login.jsp
    ManagerRoleFilter -->> Browser: forward login.jsp
else return true
    Helper -->> ManagerRoleFilter: return true
    deactivate Helper
    ManagerRoleFilter ->> UpdateRoomController: doFilter(ServletRequest arg0, ServletResponse arg1): void
    activate UpdateRoomController
    UpdateRoomController ->> GetParam: getIntParams(HttpServletRequest request, String field, String label, int min, int max, Integer defaultValue): Integer
    activate GetParam
    GetParam -->> UpdateRoomController: return roomId
    deactivate GetParam
    alt invalid data
        UpdateRoomController -->> ManagerRoleFilter: forward updateRoom.jsp
        ManagerRoleFilter -->> Browser: forward updateRoom.jsp 
    else valid data
        UpdateRoomController ->> RoomDAO: getRoomTypes(): ArrayList<RoomType>
        activate RoomDAO
        RoomDAO ->> DB: executeQuery(): ResultSet
        activate DB
        DB -->> RoomDAO: return ResultSet
        deactivate DB
        RoomDAO -->> UpdateRoomController: return ArrayList<RoomType>
        alt RoomType Null 
            UpdateRoomController -->> ManagerRoleFilter: forward updateRoom.jsp
            ManagerRoleFilter -->> Browser: forward updateRoom.jsp 
        else RoomType not null
            UpdateRoomController ->> RoomDAO: getRoomById(int roomId): Room
            RoomDAO ->> DB: executeQuery(): ResultSet
            activate DB
            DB -->> RoomDAO: return ResultSet
            deactivate DB
            RoomDAO -->> UpdateRoomController:  return Room
            deactivate RoomDAO
            alt Room null
                UpdateRoomController -->> ManagerRoleFilter: forward updateRoom.jsp
                ManagerRoleFilter -->> Browser: forward updateRoom.jsp 
            else Room not null
                UpdateRoomController ->> UpdateRoomController: HttpSession.setAttribute(String arg0, Object arg1): void
                UpdateRoomController -->> ManagerRoleFilter: forward updateRoom.jsp
                ManagerRoleFilter -->> Browser: forward updateRoom.jsp 
                deactivate ManagerRoleFilter
                deactivate UpdateRoomController
            end 
        end
    end
end

User ->> Browser: Submit on update form 
Browser ->> ManagerRoleFilter: POST /UpdateRoomController
activate ManagerRoleFilter
ManagerRoleFilter ->> ManagerRoleFilter: Context.lookup(String name): Object
ManagerRoleFilter ->> Helper: protectedRouter(HttpServletRequest request, HttpServletResponse response, int minRole, int maxRole, String page): boolean
activate Helper
Helper ->> Helper: isLogin(HttpServletRequest request): boolean
Helper ->> Helper: correctRole(HttpServletRequest request, int minRole, int maxRole): boolean
alt return false 
    Helper -->> ManagerRoleFilter: forward login.jsp
    ManagerRoleFilter -->> Browser: forward login.jsp
else return true
    Helper -->> ManagerRoleFilter: return true
    deactivate Helper
    ManagerRoleFilter ->> UpdateRoomController: doFilter(ServletRequest arg0, ServletResponse arg1): void
    activate UpdateRoomController
    UpdateRoomController ->> GetParam: getIntParams(HttpServletRequest request, String field, String label, int min, int max, Integer defaultValue): Integer
    activate GetParam
    GetParam -->> UpdateRoomController: return roomId, status, roomTypeId
    UpdateRoomController ->> GetParam: getFloatParams(HttpServletRequest request, String field, String label, float min, float max, Float defaultValue): Float
    GetParam -->> UpdateRoomController: price
    UpdateRoomController ->> GetParam: getStringParam(HttpServletRequest request, String field, String label, int min, int max, String defaultValue): String
    GetParam -->> UpdateRoomController: description
    UpdateRoomController ->> GetParam: getFileParam(HttpServletRequest request, String field, String label, long maxSize, String[] extension): String
    GetParam -->> UpdateRoomController: imageUrl
    deactivate GetParam
    alt invalid data
        UpdateRoomController -->> ManagerRoleFilter: forward updateRoom.jsp
                ManagerRoleFilter -->> Browser: forward updateRoom.jsp 
    else valid data
        UpdateRoomController ->> RoomDAO: getRoomTypes(): ArrayList<RoomType>
        activate RoomDAO
        RoomDAO ->> DB: executeQuery(): ResultSet
        activate DB
        DB -->> RoomDAO: return ResultSet
        deactivate DB
        RoomDAO -->> UpdateRoomController:  return Room
        alt room null
            UpdateRoomController -->> ManagerRoleFilter: forward updateRoom.jsp
            ManagerRoleFilter -->> Browser: forward updateRoom.jsp 
        else room not null
            UpdateRoomController ->> RoomDAO: getRoomTypeById(Integer roomTypeId): RoomType
            RoomDAO ->> DB: executeQuery(): ResultSet
            activate DB
            DB -->> RoomDAO: return ResultSet
            deactivate DB
            RoomDAO -->> UpdateRoomController:  return RoomType
            UpdateRoomController ->> BookingInfoDAO:  getActiveBookingWithRoomId(Integer bookingInfoId): ArrayList<BookingInfo>
            activate BookingInfoDAO
            BookingInfoDAO ->> DB: executeQuery(): ResultSet
            activate DB
            DB -->> BookingInfoDAO: return ResultSet
            deactivate DB
            BookingInfoDAO -->> UpdateRoomController:  return ArrayList<BookingInfo>
            deactivate BookingInfoDAO
            alt RoomType null or BookingInfoDAO null
                UpdateRoomController -->> ManagerRoleFilter: forward updateRoom.jsp
                ManagerRoleFilter -->> Browser: forward updateRoom.jsp 
            else RoomType not null or BookingInfoDAO not null
                UpdateRoomController ->> RoomDAO: updateRoom(Room room): boolean
                RoomDAO ->> DB: executeUpdate(): ResultSet
                activate DB
                DB -->> RoomDAO: return ResultSet
                deactivate DB
                RoomDAO -->> UpdateRoomController:  return boolean
                deactivate RoomDAO
                alt result = false
                    UpdateRoomController -->> ManagerRoleFilter: forward updateRoom.jsp
                    ManagerRoleFilter -->> Browser: forward updateRoom.jsp 
                else
                    UpdateRoomController -->> ManagerRoleFilter: forward updateRoom.jsp
                    ManagerRoleFilter -->> Browser: forward updateRoom.jsp 
                    deactivate UpdateRoomController
                    deactivate Browser
                    deactivate ManagerRoleFilter
                end
            end
        end
    end
end

@enduml